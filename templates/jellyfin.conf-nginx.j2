server {
  listen 80;
  listen [::]:80;

  server_name {{ jellyfin_FQDN | join(' ') }};

{% if jellyfin_letsencrypt %}
  location /.well-known/acme-challenge/ {
    default_type "text/plain";
    root /var/www/certbot;
  }
{% endif %}
{% if jellyfin_generate_self_signed_certificate and jellyfin_redirect_HTTPS or jellyfin_letsencrypt and letsencrypt_certificate.stat.exists %}
  #location / {
  #  rewrite ^ https://$server_name$request_uri? permanent;
  #}
  return 301 https://$host$request_uri;
{% else %}
  location / {
    # Proxy main Jellyfin traffic
    proxy_pass http://localhost:{{ jellyfin_HTTP_port }};
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Protocol $scheme;
    proxy_set_header X-Forwarded-Host $http_host;

    # Disable buffering when the nginx proxy gets very resource heavy upon streaming
    proxy_buffering off;
  }
  location /socket {
    # Proxy Jellyfin Websockets traffic
    proxy_pass http://localhost:{{ jellyfin_HTTP_port }};
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Protocol $scheme;
    proxy_set_header X-Forwarded-Host $http_host;
  }
{% endif %}
}
{% if jellyfin_generate_self_signed_certificate or jellyfin_letsencrypt and letsencrypt_certificate.stat.exists %}
server {
  listen 443 ssl http2;
  server_name {{ jellyfin_FQDN | join(' ') }};
{% if jellyfin_letsencrypt %}
  ssl_certificate /etc/letsencrypt/live/{{ jellyfin_FQDN | first }}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/{{ jellyfin_FQDN | first }}/privkey.pem;
{% else %}
  ssl_certificate {{ jellyfin_certificate_path }}/fullchain.pem;
  ssl_certificate_key {{ jellyfin_certificate_path }}/privkey.pem;
{% endif %}
  ssl_session_timeout 1d;
  ssl_session_cache shared:SSL:50m;
  ssl_session_tickets off;

  ssl_protocols TLSv1.2;
  ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
  ssl_prefer_server_ciphers on;

  # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
  add_header Strict-Transport-Security max-age=15768000;

  ssl_stapling on;
  ssl_stapling_verify on;

  # Security / XSS Mitigation Headers
  add_header X-Frame-Options "SAMEORIGIN";
  add_header X-XSS-Protection "1; mode=block";
  add_header X-Content-Type-Options "nosniff";

  # Content Security Policy
  # See: https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP
  # Enforces https content and restricts JS/CSS to origin
  # External Javascript (such as cast_sender.js for Chromecast) must be whitelisted.

  add_header Content-Security-Policy "default-src https: data: blob:; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' https://www.gstatic.com/cv/js/sender/v1/cast_sender.js; worker-src 'self' blob:; connect-src 'self'; object-src 'none'; frame-ancestors 'self'";

  location / {
    # Proxy main Jellyfin traffic
    proxy_pass http://localhost:{{ jellyfin_HTTP_port }};
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Protocol $scheme;
    proxy_set_header X-Forwarded-Host $http_host;

    # Disable buffering when the nginx proxy gets very resource heavy upon streaming
    proxy_buffering off;
  }
  location /socket {
    # Proxy Jellyfin Websockets traffic
    proxy_pass http://localhost:{{ jellyfin_HTTP_port }};
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Protocol $scheme;
    proxy_set_header X-Forwarded-Host $http_host;
  }
    # location block for /web - This is purely for aesthetics so /web/#!/ works instead of having to go to /web/index.html/#!/
  location = /web/ {
    # Proxy main Jellyfin traffic
    proxy_pass http://localhost:{{ jellyfin_HTTP_port }}/web/index.html;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Protocol $scheme;
    proxy_set_header X-Forwarded-Host $http_host;
  }
}
{% endif %}
